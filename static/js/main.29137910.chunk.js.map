{"version":3,"sources":["components/NotificationMessage/NotificationMessage.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","App.js","index.js","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css"],"names":["NotificationMessage","text","className","s","Statistics","good","neutral","bad","countTotalFeedbacks","countPositiveFeedbackPercentage","defaultProps","FeedbackOptions","options","onLeaveFeedback","button_list","map","option","onClick","type","button","shortid","generate","Section","title","children","container","App","state","handleIncrement","setState","prevStat","totalFeedbacks","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+SAEe,SAASA,EAAT,GAAwC,IAATC,EAAQ,EAARA,KAC1C,OAAO,mBAAGC,UAAWC,IAAEF,KAAhB,SAAuBA,ICCnB,SAASG,EAAT,GAMX,IALAC,EAKD,EALCA,KACAC,EAID,EAJCA,QACAC,EAGD,EAHCA,IACAC,EAED,EAFCA,oBACAC,EACD,EADCA,gCAEA,OACI,mCACKD,IAAwB,EACrB,qCACI,oBAAGN,UAAWC,IAAEF,KAAhB,mBAA6BI,KAC7B,oBAAGH,UAAWC,IAAEF,KAAhB,sBAAgCK,KAChC,oBAAGJ,UAAWC,IAAEF,KAAhB,kBAA4BM,KAC5B,oBAAGL,UAAWC,IAAEF,KAAhB,oBAA8BO,OAC9B,oBAAGN,UAAWC,IAAEF,KAAhB,iCACyBQ,EAAgCD,KADzD,WAKJ,cAACR,EAAD,MDlBhBA,EAAoBU,aAAe,CAC/BT,KAAM,qB,qCEDK,SAASU,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC/C,OACI,qBAAKX,UAAWC,IAAEW,YAAlB,SAEQF,EAAQG,KAAI,SAAAC,GAAM,OACd,wBACIC,QAAS,kBAAMJ,EAAgBG,IAC/BE,KAAK,SACLhB,UAAWC,IAAEgB,OAHjB,SAMKH,GAFII,IAAQC,iB,oBCZtB,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACrC,OACI,sBAAKtB,UAAWC,IAAEsB,UAAlB,UACKF,GAAS,oBAAIrB,UAAWC,IAAEoB,MAAjB,SAAyBA,IAClCC,K,ICFPE,E,4MACJC,MAAQ,CACNtB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPqB,gBAAkB,SAAAZ,GAChB,EAAKa,UAAS,SAAAC,GAAQ,sBACnBd,EAASc,EAASd,GAAU,O,EAIjCR,oBAAsB,kBAAM,EAAKmB,MAAMtB,KAAO,EAAKsB,MAAMrB,QAAU,EAAKqB,MAAMpB,K,EAE9EE,gCAAkC,SAAAsB,GAAc,OAC9CC,KAAKC,MAAO,EAAKN,MAAMtB,KAAO0B,EAAkB,M,4CAClD,WACE,MAA+BG,KAAKP,MAA5BtB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACfqB,EAA0EM,KAA1EN,gBAAiBpB,EAAyD0B,KAAzD1B,oBAAqBC,EAAoCyB,KAApCzB,gCAC9C,OACE,qCACE,cAACa,EAAD,CAASC,MAAM,wBAAf,SACE,cAACZ,EAAD,CAAiBC,QAAS,CAAC,OAAQ,UAAW,OAAQC,gBAAiBe,MAEzE,cAACN,EAAD,CAASC,MAAM,aAAf,SACE,cAACnB,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,oBAAqBA,EACrBC,gCAAiCA,a,GA/B3B0B,aAsCHT,ICrCfU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,YAAc,qCAAqC,OAAS,kC,kBCA9ED,EAAOC,QAAU,CAAC,UAAY,8B","file":"static/js/main.29137910.chunk.js","sourcesContent":["import s from './NotificationMessage.module.css';\r\n\r\nexport default function NotificationMessage({ text }) {\r\n    return <p className={s.text}>{text}</p>;\r\n}\r\n\r\nNotificationMessage.defaultProps = {\r\n    text: 'No feedback given',\r\n};","import s from './Statistics.module.css';\r\nimport NotificationMessage from '../NotificationMessage';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Statistics({\r\n    good,\r\n    neutral,\r\n    bad,\r\n    countTotalFeedbacks,\r\n    countPositiveFeedbackPercentage,\r\n}) {\r\n    return (\r\n        <>\r\n            {countTotalFeedbacks() > 0 ? (\r\n                <>\r\n                    <p className={s.text}>Good: {good}</p>\r\n                    <p className={s.text}>Neutral: {neutral}</p>\r\n                    <p className={s.text}>Bad: {bad}</p>\r\n                    <p className={s.text}>Total: {countTotalFeedbacks()}</p>\r\n                    <p className={s.text}>\r\n                        Positive feedbacks: {countPositiveFeedbackPercentage(countTotalFeedbacks())} %\r\n                    </p>\r\n                </>\r\n            ) : (\r\n                <NotificationMessage />\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    countTotalFeedbacks: PropTypes.func,\r\n    countPositiveFeedbackPercentage: PropTypes.func,\r\n};","\r\nimport s from './FeedbackOptions.module.css';\r\nimport shortid from 'shortid';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\r\n    return (\r\n        <div className={s.button_list}>\r\n            {\r\n                options.map(option => (\r\n                    <button\r\n                        onClick={() => onLeaveFeedback(option)}\r\n                        type=\"button\"\r\n                        className={s.button}\r\n                        key={shortid.generate()}\r\n                    >\r\n                        {option}\r\n                    </button>\r\n                ))\r\n            }\r\n        </div >\r\n\r\n    );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.array,\r\n    onLeaveFeedback: PropTypes.func,\r\n};","import s from './Section.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Section({ title, children }) {\r\n    return (\r\n        <div className={s.container}>\r\n            {title && <h3 className={s.title}>{title}</h3>}\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.any,\r\n};","\nimport { Component } from 'react';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = option => {\n    this.setState(prevStat => ({\n      [option]: prevStat[option] + 1,\n    }));\n  };\n\n  countTotalFeedbacks = () => this.state.good + this.state.neutral + this.state.bad;\n\n  countPositiveFeedbackPercentage = totalFeedbacks =>\n    Math.round((this.state.good / totalFeedbacks) * 100);\n  render() {\n    const { good, neutral, bad } = this.state;\n    const { handleIncrement, countTotalFeedbacks, countPositiveFeedbackPercentage } = this;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={['good', 'neutral', 'bad']} onLeaveFeedback={handleIncrement} />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            countTotalFeedbacks={countTotalFeedbacks}\n            countPositiveFeedbackPercentage={countPositiveFeedbackPercentage}\n          />\n        </Section>\n      </>\n    );\n  }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_list\":\"FeedbackOptions_button_list__1htK1\",\"button\":\"FeedbackOptions_button__1a_zA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__3kUOJ\"};"],"sourceRoot":""}